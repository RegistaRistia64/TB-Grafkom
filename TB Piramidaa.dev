//GISA
#include <GL/glut.h>
#include <iostream>
#include <cmath>

float cloudY = 5.0f;
float cloudScale = 1.0f;
float moonX = 6.0f;
float moonY = 6.0f;
float rotationAngle = 0.0f;
float moonRotationAngle = 0.0f;
bool showAxes = true;
float TreeX = 5.0f;
float TreeZ = 0.0f;

struct CameraPosition {
    float camPosX = 0.0f;
    float camPosY = 10.0f;
    float camPosZ = 20.0f;
    float targetX = 0.0f;
    float targetY = 0.0f;
    float targetZ = 0.0f;
    float radius = 20.0f;
    float angle = 0.0f;
    bool rotate = false;
} pos;

void initLighting() {
    GLfloat ambientLight[] = {0.2f, 0.2f, 0.2f, 1.0f};
    GLfloat diffuseLight[] = {0.8f, 0.8f, 0.8f, 1.0f};
    GLfloat lightPosition[] = {10, 4, 0.0f, 1.0f};

    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glLightfv(GL_LIGHT0, GL_AMBIENT, ambientLight);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuseLight);
    glLightfv(GL_LIGHT0, GL_POSITION, lightPosition);

    glEnable(GL_COLOR_MATERIAL);
    glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
}

void drawAxes() {
    if (!showAxes) return;

    glDisable(GL_LIGHTING);
    glBegin(GL_LINES);
        glColor3f(1.0f, 1.0f, 1.0f);
        glVertex3f(-10.0f, 0.0f, 0.0f);
        glVertex3f(10.0f, 0.0f, 0.0f);

        glVertex3f(0.0f, -10.0f, 0.0f);
        glVertex3f(0.0f, 10.0f, 0.0f);

        glVertex3f(0.0f, 0.0f, -10.0f);
        glVertex3f(0.0f, 0.0f, 10.0f);
    glEnd();
    glEnable(GL_LIGHTING);
}

void drawOctahedron() {
    glPushMatrix();
    glScalef(3.2f, 3.2f, 3.2f);
    glColor3f(1.0f, 0.8f, 0.0f);
    glutSolidOctahedron();
    glPopMatrix();
}

void drawFloor() {
    glPushMatrix();
    glScalef(13.0f, 3.5f, 13.0f);
    glTranslated(0, -0.5, 0);
    glColor3ub(246, 215, 176);
    glutSolidCube(1.0f);
    glPopMatrix();
}
//WANDA
void drawTree(float x, float z) {
    glPushMatrix();
    glTranslatef(x, 0.55f, z);

    glColor3f(0.55f, 0.27f, 0.07f);
    glPushMatrix();
    glScalef(0.2f, 1.5f, 0.2f);
    glutSolidCube(1.0f);
    glPopMatrix();

    glColor3f(0.0f, 0.8f, 0.0f);
    for (int i = 0; i < 4; i++) {
        glPushMatrix();
        glTranslatef(0.0f, 0.75f, 0.0f);
        glRotatef(i * 90, 0.0f, 1.0f, 0.0f);
        glScalef(1.5f, 0.1f, 0.3f);
        glutSolidCube(1.0f);
        glPopMatrix();
    }

    glColor3f(0.5f, 0.35f, 0.05f);
    glPushMatrix();
    glTranslatef(0.25, 0.6f, 0);
    glutSolidSphere(0.1f, 20, 20);
    glPopMatrix();

    glPopMatrix();
}

void drawCloud() {
    glPushMatrix();
    glTranslatef(0.0f, cloudY, 0.0f);
    glScalef(cloudScale, cloudScale, cloudScale);

    glColor3f(0.8f, 0.8f, 0.8f);
    glutSolidSphere(1.0f, 20, 20);

    glPushMatrix();
    glTranslatef(-1.2f, 0.0f, 0.0f);
    glutSolidSphere(0.8f, 20, 20);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(1.2f, 0.0f, 0.0f);
    glutSolidSphere(0.8f, 20, 20);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(-0.8f, 0.6f, 0.0f);
    glutSolidSphere(0.6f, 20, 20);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(0.8f, 0.6f, 0.0f);
    glutSolidSphere(0.6f, 20, 20);
    glPopMatrix();

    glPopMatrix();
}

void drawMoon() {
    glPushMatrix();
    glTranslatef(moonX, moonY, 0.0f);
    glRotatef(moonRotationAngle, 0.0f, 0.0f, 1.0f);
    glColor3ub(220, 220, 220);
    glutSolidSphere(1.5f, 20, 20);
    glPopMatrix();
    
}


//BUBU
void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();

    pos.camPosX = pos.radius * sin(pos.angle);
    pos.camPosZ = pos.radius * cos(pos.angle);

    gluLookAt(
        pos.camPosX, pos.camPosY, pos.camPosZ,
        pos.targetX, pos.targetY, pos.targetZ,
        0.0, 1.0, 0.0
    );

    drawAxes();
    drawFloor();

    glPushMatrix();
    glRotatef(rotationAngle, 0.0f, 1.0f, 0.0f);
    drawOctahedron();
    glPopMatrix();

    drawCloud();
    drawMoon();

    drawTree(TreeX, TreeZ);
    drawTree(-3.0f, -3.0f);
    drawTree(3.0f, -3.0f);
    drawTree(-3.0f, 3.0f);
    drawTree(3.0f, 3.0f);

    glutSwapBuffers();
}

void keyboard(unsigned char key, int x, int y) {
    switch (key) {
        case 'w': cloudY += 0.5f; break;
        case 's': cloudY -= 0.5f; break;
        case 'r': rotationAngle += 5.0f; break;
        case 'x': showAxes = !showAxes; break;
        case 'a': TreeX -= 0.5f; break;
        case 'd': TreeX += 0.5f; break;
        case 'z': TreeZ -= 0.5f; break;
        case 'c': TreeZ += 0.5f; break;
        case '+': pos.radius += 1.0f; break;
        case '-': pos.radius -= 1.0f; break;
        case 'q': cloudScale += 0.1f; break;
        case 'e': cloudScale -= 0.1f; break;
        case 't': pos.angle += 0.1f; break;
        case 'g': pos.angle -= 0.1f; break;
    }
    glutPostRedisplay();
}

void timer(int value) {
    moonRotationAngle += 1.0f;
    if (moonRotationAngle >= 360.0f) moonRotationAngle -= 360.0f;

    glutPostRedisplay();
    glutTimerFunc(50, timer, 0);
}

void reshape(int w, int h) {
   
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0, (float)w / (float)h, 1.0, 100.0);
    glMatrixMode(GL_MODELVIEW);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(800, 600);
    glutCreateWindow("Kelompok 6 Piramida Mesir Malam Hari");

    glEnable(GL_DEPTH_TEST);
    initLighting();

    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    glutTimerFunc(0, timer, 0);

    glutMainLoop();
    return 0;
}
